plugins {
    id 'java'
    id 'java-library'
    id 'de.fanero.gradle.plugin.nar'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-Xlint:none'
}

sourceSets {
    // Make the compileOnly dependencies available when compiling/running tests
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

dependencies {
    implementation project(':commons')
    api project(':source')

    implementation("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    implementation("io.vavr:vavr:${vavrVersion}")
    implementation "com.datastax.oss:java-driver-core:${ossDriverVersion}"
    implementation "com.datastax.oss:java-driver-query-builder:${ossDriverVersion}"

    compileOnly("org.apache.pulsar:pulsar-client-original:${pulsarVersion}")
    compileOnly("org.apache.pulsar:pulsar-io-common:${pulsarVersion}")
    compileOnly("org.apache.pulsar:pulsar-io-core:${pulsarVersion}")

    testRuntime("org.slf4j:slf4j-simple:1.7.30")
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation project(':testcontainers')

    nar "org.apache.pulsar:pulsar-io:${pulsarVersion}"
}

jar {
    zip64=true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

nar {
    manifest {
        attributes 'Nar-Group': 'org.apache.pulsar'
        attributes 'Nar-Id': 'pulsar-io-cassandra-source-nar'
    }
    from("./src/main/resources") {
        include("META-INF/services/pulsar-io.yaml")
    }
}

assemble.dependsOn(nar)

test {
    // Add dependency on jar task, since it will be main target for testing
    dependsOn project(':producer-v4-pulsar').shadowJar
    dependsOn nar

    // Rearrange test classpath, add compiled JAR instead of main classes
    //classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(shadowJar.archiveFile)

    useJUnitPlatform()

    systemProperty "sourceBuildDir", buildDir
    systemProperty "producerBuildDir", project(':producer-v4-pulsar').buildDir
    systemProperty "projectVersion", project.version
}
