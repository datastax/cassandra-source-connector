plugins {
    id 'java'
    id 'java-library'
    id 'io.github.lhotari.gradle-nar-plugin'
    id 'com.palantir.docker'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-Xlint:none'
}

sourceSets {
    // Make the compileOnly dependencies available when compiling/running tests
    test.compileClasspath += configurations.compileClasspath
    test.runtimeClasspath += configurations.compileClasspath
}

dependencies {
    implementation project(':commons')
    implementation (project(':commons-luna')) {
        exclude group: 'com.datastax.oss', module: 'pulsar-client'
    }
    implementation project(':connector')

    implementation("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    implementation("io.vavr:vavr:${vavrVersion}")
    implementation "com.datastax.oss:java-driver-core-shaded:${ossDriverVersion}"
    implementation "com.datastax.oss:java-driver-query-builder:${ossDriverVersion}"

    implementation("org.apache.avro:avro:${avroVersion}")

    compileOnly("com.datastax.oss:pulsar-client-original:${lunaVersion}")
    compileOnly("com.datastax.oss:pulsar-io-common:${lunaVersion}")
    compileOnly("com.datastax.oss:pulsar-io-core:${lunaVersion}")

    constraints {
        implementation("ch.qos.logback:logback-classic:${logbackVersion}")
        implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
        implementation("com.github.jnr:jnr-posix:${jnrVersion}")
        implementation("io.netty:netty-handler:${nettyVersion}")
        implementation("io.netty:netty-transport-native-epoll:${nettyVersion}")
        implementation("io.netty:netty-transport-native-unix-common:${nettyVersion}")
        implementation("io.netty:netty-codec-haproxy:${nettyVersion}")
        implementation("io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}")
        implementation("org.apache.commons:commons-compress:${commonCompressVersion}")
        implementation("com.google.code.gson:gson:${gsonVersion}")
    }

    testRuntimeOnly("org.slf4j:slf4j-simple:${slf4jVersion}")
    testRuntimeOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation project(':testcontainers')
    testImplementation project(':testcontainers-luna')

    nar "com.datastax.oss:pulsar-io:${lunaVersion}"
}

tasks.jar.dependsOn project(':commons').jar
jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    zip64=true
}

nar {
    archivesBaseName = 'luna-cassandra-source'
    manifest {
        attributes 'Nar-Group': 'com.datastax.oss'
        attributes 'Nar-Id': 'luna-io-cassandra-source-nar'
    }
}

assemble.dependsOn(nar)

test {
    // Add dependency on jar task, since it will be main target for testing
    dependsOn project(':agent-c4-luna').shadowJar
    dependsOn nar

    useJUnitPlatform()

    environment 'PULSAR_IMAGE', 'datastax/lunastreaming:' + lunaTag
    environment 'CASSANDRA_IMAGE', 'cassandra:' + cassandra4Version

    systemProperty "connectorBuildDir", buildDir
    systemProperty "agentBuildDir", project(':agent-c4-luna').buildDir
    systemProperty "pulsarDistribution", "luna"
    systemProperty "projectVersion", project.version
}

dockerPrepare.dependsOn(nar)
docker {
    name "${dockerRepo}lunastreaming:${lunaTag}-csc"
    files "$buildDir/libs/", "src/docker/"
    buildArgs([BUILD_VERSION: project.version, LUNA_VERSION: lunaTag])
}
build.dependsOn(project.tasks['docker'])
