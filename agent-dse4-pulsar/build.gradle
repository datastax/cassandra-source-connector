plugins {
    id 'java'
    id 'application'
    id "com.github.johnrengelman.shadow"
    id 'com.palantir.docker'
    id 'docker-compose'
}

application {
    mainClassName = "$mainClassName"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Premain-Class': "$mainClassName"
    }
    zip64=true
}

compileTestJava {
    options.compilerArgs += '-parameters'
}

sourceSets {
    main.java.srcDir project(':agent-dse4-luna').sourceSets.main.java
    test.java.srcDir project(':agent-dse4-luna').sourceSets.test.java
    test.resources.srcDir project(':agent-dse4-luna').sourceSets.test.resources
}

configurations {
    custom
}

dependencies {
    custom project(':commons')
    custom project(':commons-pulsar')
    custom project(':agent')
    custom project(':agent-pulsar')
    custom project(':agent-dse4')

    implementation project(':commons')
    implementation project(':commons-pulsar')
    implementation project(':agent')
    implementation project(':agent-pulsar')
    implementation project(':agent-dse4')

    implementation("org.apache.avro:avro:${avroVersion}")
    implementation("${pulsarGroup}:pulsar-client:${pulsarVersion}")

    compileOnly("com.datastax.dse:dse-db:${dse4Version}")
    testCompileOnly("com.datastax.dse:dse-db:${dse4Version}")
    testImplementation("com.datastax.dse:dse-db:${dse4Version}") {
        exclude group: 'io.netty'
    }

    testImplementation "com.datastax.oss:java-driver-core:${ossDriverVersion}"
    testImplementation "com.datastax.oss:java-driver-query-builder:${ossDriverVersion}"

    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation project(':testcontainers')
    testImplementation project(':testcontainers-pulsar')

    testRuntimeOnly "org.slf4j:slf4j-api:${slf4jVersion}"
    testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
}

test {
    // Add dependency on jar task, since it will be main target for testing
    dependsOn shadowJar

    // Rearrange test classpath, add compiled JAR instead of main classes
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(shadowJar.archiveFile)

    useJUnitPlatform()

    environment 'PULSAR_IMAGE', 'apachepulsar/pulsar:' + pulsarVersion
    environment 'CASSANDRA_IMAGE', 'datastax/dse-server:' + dse4Version

    systemProperty "buildDir", buildDir
    systemProperty "projectVersion", project.version
    systemProperty "pulsarDistribution", "pulsar"
}

shadowJar {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    configurations = [project.configurations.custom]
    // relocate AVRO because dse-db depends on avro 1.7.7
    relocate 'org.apache.avro', 'com.datastax.oss.cdc.avro'
}

jar.enabled = false
assemble.dependsOn(shadowJar)
project.afterEvaluate {
    project.tasks.generatePomFileForMavenPublication.enabled = false
    project.tasks.publishMavenPublicationToMavenRepository.enabled = false
}

docker {
    name "${dockerRepo}dse4-server:${dse4Version}-cdc-pulsar"
    dependsOn shadowJar
    files "$buildDir/libs/", "src/docker/"
    buildArgs([BUILD_VERSION: project.version,
               DSE_VERSION: dse4Version,
               COMMITMOG_SYNC_PERIOD_IN_MS: commitlog_sync_period_in_ms,
               CDC_TOTAL_SPACE_IN_MB: cdc_total_space_in_mb])
}
build.dependsOn(project.tasks['docker'])

dockerCompose {
    projectName = "test1"
    useComposeFiles = ['../docker-compose.yaml']
    environment.put 'AGENT_VERSION', 'dse4'
    environment.put 'STREAM_PLATFORM', 'pulsar'
    environment.put 'PROJECT_VERSION', project.version
    environment.put 'CASSANDRA_IMAGE', "${dockerRepo}dse4-server:${dse4Version}-cdc-pulsar"
    environment.put 'PULSAR_IMAGE', "apachepulsar/pulsar:${pulsarVersion}-csc"
    waitForTcpPorts = false
    startedServices = ['cassandra','pulsar']

    stress {
        projectName = "test1"
        startedServices = ['cassandra-stress']
        scale = ['cassandra-stress': 1]
    }
    stress2 {
        projectName = "test1"
        startedServices = ['cassandra-stress']
        scale = ['cassandra-stress': 2]
    }
    prometheus {
        projectName = "test1"
        startedServices = ['prometheus','grafana']
    }
    elasticsearch {
        projectName = "test1"
        startedServices = ['elasticsearch']
    }
}

